package com.mycompany.app.domain;

import static com.mycompany.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShoppingCartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAllPropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertShoppingCartAutoGeneratedPropertiesEquals(expected, actual);
        assertShoppingCartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAllUpdatablePropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertShoppingCartUpdatableFieldsEquals(expected, actual);
        assertShoppingCartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAutoGeneratedPropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(expected)
            .as("Verify ShoppingCart auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartUpdatableFieldsEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(expected)
            .as("Verify ShoppingCart relevant properties")
            .satisfies(e -> assertThat(e.getPlacedDate()).as("check placedDate").isEqualTo(actual.getPlacedDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getTotalPrice())
                        .as("check totalPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalPrice())
            )
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()))
            .satisfies(e -> assertThat(e.getPaymentReference()).as("check paymentReference").isEqualTo(actual.getPaymentReference()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartUpdatableRelationshipsEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(expected)
            .as("Verify ShoppingCart relationships")
            .satisfies(e -> assertThat(e.getCustomerDetails()).as("check customerDetails").isEqualTo(actual.getCustomerDetails()));
    }
}
